
geolocation:
====================

using map box with geolocation example:
https://www.pubnub.com/blog/2015-04-29-displaying-live-location-data-javascript-mapbox-api/

geojson:
====================

good writeup on geojson:
https://macwright.org/2015/03/23/geojson-second-bite.html

service worker - map box example code (at bottom)
https://github.com/mapbox/mapbox-gl-js/issues/4326

storing json data in postgres
https://blog.codeship.com/unleash-the-power-of-storing-json-in-postgres/

ibm resources:
======

blogs:
https://medium.com/ibm-watson-data-lab/navigating-sxsw-via-cognitive-chatbot-28a2e1f7a456
https://medium.com/ibm-watson-data-lab/the-most-popular-search-term-at-sxsw-according-to-our-chatbox-9f4a47a33406
demo app:
https://cognitive-event-finder.mybluemix.net
source code:
https://github.com/ibm-cds-labs/cognitive-event-finder


webpack/react:
====================

http2 aggressive splitting for web pack
https://github.com/webpack/webpack/tree/master/examples/http2-aggressive-splitting

generate service workers module for web pack:
https://www.npmjs.com/package/sw-precache-webpack-plugin

investigate code bloat
https://github.com/danvk/source-map-explorer

css above the fold plugin
https://github.com/addyosmani/critical-path-css-tools#node-modules

tutorial:
https://medium.com/@addyosmani/progressive-web-apps-with-react-js-part-i-introduction-50679aef2b12

-lighthouse chrome extension for testing:
https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk
https://github.com/GoogleChrome/lighthouse

inspect android devices using chrome:
chrome://inspect

lazy loading in react
https://webpack.js.org/guides/lazy-load-react/


react pwa starter projects:
====================

https://github.com/insin/react-hn
https://github.com/GoogleChrome/sw-precache/tree/master/app-shell-demo

help for building the manifest:
Realfavicongenerator.net

react-map-gl (using react with mapbox)
https://github.com/uber/react-map-gl

Progressive web app starter using geolocation and device orientation in React with Redux
https://github.com/paulhoughton/remember

critical path:
====================

Innovating with HTTP 2.0 Server Push
https://www.igvita.com/2013/06/12/innovating-with-http-2.0-server-push/

tips on getting site more secure:
———————————————————
Some more tips to get your site more secure:

Upgrade unsecure requests (“HTTP” connections) to “HTTPS” redirecting users as needed. Take a look at Content Security Policy and upgrade-insecure-requests.

Update all links referencing “http://” to “https://”. If you rely on third-party scripts or content, talk to them about making their resources available over HTTPS too

Use HTTP Strict Transport Security (HSTS) headers when serving pages. It’s a directive that forces browsers to only talk to your site in HTTPS.

I’d recommend watching Deploying HTTPS: The Green Lock and Beyond and Mythbusting HTTPS: Squashing security’s urban legends for more.

with mongoDB:
====================

building with mongoDB and map box (series links at bottom of page)
https://medium.com/@SamCorcos/building-campaignhawk-an-open-source-election-canvassing-app-with-meteor-and-react-part-1-aff5e8e19a32

-GeoJSON layers stored in database
http://www.invertphil.net/node-mapbox-mongo-with-crowdsourced-markers-part-1/

