-always get to the root of the problem. The further up the tree you can get the better.

-keep fixed value things to markup (css/html)
save your logic code for dynamic things

-there should always be a simple way and an advanced way of doing any given task.
Frameworks, languages and algorithms should also have a way for you to enter them using the “basics” and most problems should be solvable using the basics. Only if you can’t solve them using basics - should you try to solve things using advanced techniques.

-have your mechanics working as console logs before you connect it to the moving parts

-doing large amounts at a time is never possible, you can be successful at scratching away at the surface though. How do do go faster? You can’t do more at a time, you can only get faster at doing small bits at a time.

type everything out that you can. It’s sets you up to understand your “chainning” brain rather than your visual brain. Cutting and pasting makes you remember how things look rather than how they work in small bits

-keep code in small chunks (units) break code into separate functions that do one thing, then separate components that each do one thing and keep each component within a reasonable page of code.

-whenever finishing a task, clean up after yourself. Close windows, remove unneeded logs, and temporary code.
Tidy up the product of your task.

-be forceful
like when driving a stick shift and there's some unsurety of what gear you'r currently in, just force it into the gear you need to be at now.
In code when working with finicky situations in aplication lifecycle, just force it into the correct state instead of trying to keep track of
too many things. For example, instead of keeping track of which buttons are pressed, simply turn them all off before setting the current button to be active.

-keep things small
keep projects small, keep codebase small, keep each module small.
The larger the project, the more complexity, and more overhead needed to manage the amount of code.

-have a cutoff moment
have a cutoff time in the project where no new features are added and there's just debugging. More features will introduce more bugs.

-keep data freely flowing in it’s natural form. Avoid converting data into something else or adding to/ taking away from it on the fly if it’s the kind of data that updates constantly. If you’re doing this, rethink what you’re doing.

-don’t ever underestimate any small task. Think it through before diving in, take it seriousely. Even very small things can not be so “obviouse” to solve.

-have a defined arrangement of windows so you know where to find things. have a limit to how many windows opened at once

-start from beginning to the end, not all at once, one step at at time in one direction

-go as fast as possible, but slow down when hitting a concentrated area, step through each part of it and slow down until it's understood, don't skim over.

-every now and then, pause and try to understand what it's doing overall. Step out and look at the big picture.

steps for debugging:
==========

-look at flattened output (chrome dev tools element view)
-look at code stepping through order of actions
-insert mock dependency
-remove components dependencies one by one to narrow down problem

-try to approach a problem with as many diffrent points of view - as many different angles of attach as possible. Solving problems is a combinations of stepping back and reflecting as well as active attempts at different angeles until you eventually narrow down what the problem is.

-don’t be afraid to dig when you need to if you need more information, dig out the information you need to see the environment, see how the code works, then dig deeper when you know what area for sure is causing it.