---------------------
terminal
---------------------
clear line to beginning:
Ctrl + u

go to beginning of line:
ctrl + a

to wipe the whole current line in the terminal:
Ctrl + A Ctrl + K 

clear screen to get more space:
clear

word completion:
write first letters + tab

---------------------
help/manual
---------------------

#quick help
<command> —help

#comprehensive help
<command> man

---------------------
sudo
---------------------

#run sudo (even with root disabled)
sudo -s <command>

---------------------
users
---------------------

#adding a new user (named deploy) with a login shell of bash
#and create the user’s home directory
sudo useradd --create-home -s /bin/bash deploy

#give it sudo abilities
sudo adduser deploy sudo

#we need to set a password for it to unlock it:
sudo passwd deploy

#list all users with info (print info from the /etc/passwd file):
cat /etc/passwd

#shorter version:
awk -F':' '{ print $1}' /etc/passwd

#delete a user and related files from user account. 
#must be run as root user
userdel userName

#To remove the user’s home directory and mail spool
userdel -r userName

---------------------
printing/editing files
---------------------

#to print out contents of a file:
cat file.txt

#to edit a file:
nano file.txt

---------------------
list files
---------------------

#list directory contents:
ls

#list long version
ls -l

#list long version and hidden files
ls -la

#list with pagination (pipe to the more program)
ls -la |more

#inspect file type
file <filename>

---------------------
navigation
---------------------

#print working directory:
pwd

#enter folder:
cd public_html

#go up a level
cd ..

#your current dir is
.

#go to root
cd /

#go to home dir
cd ~

#go to absolute path
cd /home/mydir

---------------------
creating/deleting
---------------------

#create folder
mkdir <folder name>

#create file(s)
touch file1.txt file2.txt

#recursively delete contents and force it even if folders not empty
rm -rf thefolder

---------------------
moving/renaming files
---------------------

#move file/folder
mv hello.sh /usr/local/bin

#also use mv to rename files
mv file1.txt file1renamed.txt

---------------------
file permissions:
---------------------

list current permissions in dir
ls -alh

good article on changin ownership/file permissions
http://www.inmotionhosting.com/support/website/ssh/changing-permissions-and-ownership

change ownership of file:
chown user:user file
chown annettewestdrape:annettewestdrape file.txt
chown annettewestdrape:annettewestdrape wp-activate.php

change ownership of entire folder:
chown -R annettewestdrape:annettewestdrape public_html/

below is the correct ownership for public_html folder:
chown -R annettewestdrape:nobody public_html/
(theusername:nobody)

list permissions for a file:
ls -l index.php

File access permissions appear in the first column of the output i.e. -rw-r--r--

    The first character - is nothing but the file type. ñ means regular file and d means directory.
    The next three characters (rw-) specify permissions for the user who owns the file
    The next three (r--) specify permissions for all members of the group that owns the file.
    Finally, the last three characters in the column (r--) specify permissions for all other users on the system.

Each character in permission has meaning as follows:

    r : Read permission.
    w : Write permission.
    x : Execute permission.
    - : No permission.

For example rw- permission means owner can read, write to a file but cannot execute the same.

change file permissions:
chmod 755 index.php


For wordpress, change file permissions to proper format recursively with the following command:

For Directories:
find /path/to/your/wordpress/install/ -type d -exec chmod 755 {} \;
For Files:
find /path/to/your/wordpress/install/ -type f -exec chmod 644 {} \;

---------------------
search (locate)
---------------------
#for mac, enable locate first:
sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.locate.plist
#for linux:
sudo updateddb
#then
locate <filename>
#locate with part of the file name
locate *filename*


---------------------
copy files to different directories
---------------------


#copy a file to a new location:
cp file1.zip /home/user/

#copy entire contents recursively

cp -R image/ image2

---------------------
run a php script/page:
---------------------
from the root location...
move up a level
cd ..

navigate to your site:
cd var/www/rightdrive.ca/beta.rightdrive.ca/wp-content/themes/autodealer

execute the php file:
php test-template-upload-featured-news.php

---------------------
zip/uzip
---------------------

to zip multiple files into one:
zip new_file_name.zip original_file1.html original_file2.html
or zip an entire folder:
zip -r filename.zip foldername/
zip -r moldinspectiontesting.ca.zip moldinspectiontesting.ca/
unzip:
unzip wordpress-4.4.2.zip

here's a good tutorial for it:
http://www.servermom.org/how-to-zip-compress-and-unzip-extract-files/65/
and
http://andreasdittes.com/how-to-zip-a-folder-via-ssh-terminal/

copy file:
cp wordpress-4.4.2.zip /home/annettewestdrape/public_html
cp annettewestdraperycontent.zip /home/annettewestdrape/public_html

for entire folder use -r:
cp -r originalfolder /home/annettewestdrape/public_html


---------------------
wildcards:
--------------------

zero or more characters
and before or after a word. The below would list the same file if it was to only one in the directory
ls *
ls *ephant
ls eleph*

replace one character using the ?
ls el?phant

wildcard copy all files of similar name:
cp elep* ../final/

--------------------
systen:
--------------------

check number of packages installed:
dpkg -l | wc -l

--------------------
redirection and piping:
--------------------

cat file1
prints out a file content.
So when I do:
---------
cat > file1
this is some content...
---------
it will pipe what I wrote in the console to file1.
Below woud send things the other way (word cound from the file):
---------
wc -w > file1
prints:
4
---------
add to the end of a file
---------
echo "another line to file example" >> myfile.txt
---------
try this to push output of the read input:
---------
wc -w < file1 > wordcount
cat wordcount
4
---------
print files list to a "list" file:
ls -l > list

| (the pipe character): Send the output of one program to the input of another
take the output of ls -l and pipe it to wordcount per lines
ls -l | wc -l



---------------------
assign variables
---------------------
in console:
a='this is a string'
or
a=5
echo $a

#to remove value from a"
unset a
to write expressions use double paren construct:
b=$(ls -a)
or
a=$((a + 1))
echo $b

#must use double quotes to print actual value of a
b="a is $a"
echo  $b
a is 5

# create bash script:
# --------------------

# -touch file: hello.sh
# -nano it
# -put at the top:

#below tells it where find bash to launch it
#!/bin/bash

#print out hello world to console
echo 'Hello World!'

# if you ls -l hello.sh you'll see permissions:
# -rw-rw-r--

# you need to have execute ability so typically 755 (executable for everyone but editable
# only for me)
chmod 755 hello.sh

# (because you have to resolve it to it's current directory first), you can run it like:
./hello.sh

# to find out the PATH variable to find places the system looks for executable files:
echo $PATH

# move it to an existing directory that PATH knows, typically: /usr/local/bin (must be super user)
sudo mv hello.sh /usr/local/bin

# now we can just type hello.sh no matter where we are:
hello.sh

# --------------------
# example script:
# --------------------

#below tells it where find bash to launch it
#!/bin/bash

#print out hello world to console
echo 'Change current directory to working...'

# we must execute this script using:
. hello.sh 
# to make sure it executes in it's own instance of the shell to change current directory

# --------------------
# aliases:
# --------------------

#to make it easier for the above, just create an alias: 
alias hello='. hello.sh'

#but when the console gets exited, you'll loose it so we must create .bash_aliases in the user's folder:
touch .bash_aliases
nano .bash_aliases
#write:
alias alias hello='. hello.sh'

# * you need to restart the terminal for the changes to take effect
# note: the hidden folder .bashrc causes .bash_aliases to run. So we can use configure .bashrc if needed to do
# stuff when the terminal immediately starts

# --------------------
# conditional statements:
# --------------------
# the $? variable holds the exit status from the prev. command
echo $?

#the man will show exit stats for every command type(they are all similar):
# 0 = success
# 1 = some errors
# 2 = fail

#contitional statement (-e checks for existance of a file):
[ -e foo ]
echo $?
#prints:
0

#bash script if statement:
if [ -e foo ]
then
echo 'foo exists'
else
echo 'foo not found'
fi

#you can find a list of test expressions like -e in
man test

# --------------------
# if statements example script:
# --------------------

# $# holds the number of command line arguments
if [ $# -eq 1 ]; then
# -e file exists
# $1 the first command line argument
	if [ -e $1 ]; then
		echo "file $1 exists"
    else
        echo "file $1 not found"
    fi
else
    echo "usage: fe filename - reort the existance of a file"
fi
# useage: fe filename

# --------------------
# guessing game script:
# --------------------

#!/bin/bash
#if there is one argument:
if [ $# -eq 1 ]; then
    # generate a random number bewteen 1 and the argument:
    # seed with the PID of the script (every script has a PID guid number):
    RANDOM=$$

    # debug only - ths prints out the PID to make sure it's working:
    ps
    #end debug

    # get a random number between 0 and $1 - 1 inclusive:
    corect=$(( RANDOM % $1 ))
    # add one:
    correct=$(( correct + 1 ))

    # set up an initally incorrect guess
    guess=0

    # debug only:
    echo "number is $correct"
    # end debug

    # a variable to count the guesses:
    count=0

    # debug only:
    echo "number is $correct"
    # end debug

    #  a variable to count the guesses:
    count=0

    # get guesses from the user until they
    # get it right:
    # -ne (not equal to)
    while [ $guess -ne $correct ]; do

        # get a guess
        echo "Guess my number (1 - $1) -> "
        read guess

        # count this guess:
        count=$(( count + 1 ))

        # too high, too low, or just right?
        if [ $guess -gt $correct ]; then
            echo "Too high! Try again -> "
        elif [ $guess -lt $correct ]; then
            echo "Too low! Try again -> "
        else
            echo "Correct. Guessed $correct in $count tries!"
        fi

    done #end of loop
else
    echo "USAGE: guess <num>, where the correct answer will be\n"
    echo "a random number in the range 1..num inclusive.\n\n"
fi

# --------------------
# counter (for, while and until loops):
# to use:
# count.sh 5
# --------------------
# the sequence command (you can do this in the console):
# seq 1 5 
# 12345


#!/bin/bash

# counts from 1 to $1 using for, while, and until loops.

# ensure only one argument:

if [ $# -eq 1 ]; then

    # a counter variable:
    counter="1"

    echo "for loop:"
    # if you need a specific range you can do
    # for i in {1..7}; do
    for i in $( seq 1 $1 ); do
        echo $i
    done

    echo "while loop:"
    while [ $counter -le $1 ]; do
        echo $counter
        counter=$(( counter + 1 ))
    done

    # reset counter
    counter="1"

    echo "until loop:"
    until [ $counter -gt $1 ]; do
        echo $counter
        counter=$(( counter + 1 ))
    done
else
    echo "USAGE: $0 <count> - where count is the value to be"
    echo "counted to."
fi

# --------------------
# case statement:
# --------------------
# run this with . menu.sh (to make sure it runs in this copy of the shell 
# since it's a directory script')

echo 'Please choose an option: '
echo '1: chage to directory one'
echo '2: chage to directory two'
echo '3: chage to directory three'
echo 'Q: quit'
read choice

bashdir='/home/vagrant/working/'

# if uppercase or lowercase q do nothing
# *) is the default case (for anything else)
case $choice in
1)
    cd ${bashdir}one/
    ;;
2)
    cd ${bashdir}two/
    ;;
3)
    cd ${bashdir}three/
    ;;
[Qq])
    ;;
*)
    echo 'Incorrect menu entry.'
esac

# --------------------
# grep (global regular expression print):
# searches for patterns within files 
# then prints out where those patterns occur
# --------------------

# highlight all the hyphens in a file
gret '-' bindir.txt
# hyphen at beginning of text
grep '^-' bindir.txt
# ends with...
grep 'e$' bindir.txt
# find this text in any file ending with ...dir.txt
grep 'Aug' *dir.txt
# the -i switch makes it case-insensitive
grep -i 'aug' *dir.txt
# -v give's you the opposite of the regex
grep -v 'aug' *dir.txt
# combine them:
grep -vi 'aug' *dir.txt
# return the count of matches:
grep -c 'Aug' *dir.txt

# oher grep options:

# -l : print file names having matches
# -L : print file nemes not having matches
# -h : don't print file names
# -n : print numbers of matching lines

# man grep for more options

# --------------------
# piping with grep
# --------------------

# pipe listing from /etc folder to grep and return ones that match
ls -l /etc | grep 'Aug'
# pipe two folders at once
ls -l /etc /bin | grep 'Aug'

# --------------------
# regex meta characters with grep
# --------------------

# bind to beginning
^
# bind to ending
$
# match only one character within set (either A,B, or C)
[ABC]
# negate - anything but
^[ABC]
# match zero or one of any character
.
# 

# --------------------
# extended regular expressions (must use grep -E...)
# --------------------

# matches the preceeding expression 0 or 1 times
?
# matches 0 or more times
*
# forces at least one or more match
+

# exact number of matches:
# where n is the least number to match and m is the most
{n, m} 
# match exactly n times
{n}
# match n or more times
{n, }
# match at most m times
{ ,m}

#Alternation:
# vertical pipe matches ether left or right
# match either the whole string 'ABC' or 'XYZ' but not AXY, for example
'ABC|XYZ'
#match any single character in the brackets appearing once
#(same as [A-CX-Z])
[ABC|XYZ]

# back references 
# these are used to group parts within your regex
()

# --------------------
# example to pull valid email addresses
# --------------------
# foo@somesite.com
# bar@blah.org
# baz@thoogh.net

# match emails in a text file containning them
# begin with any letter, any character, zero or more, @, ., org-com-net-edu
grep -E '^[A-Za-z].*@[A-Za-z].*\.(org|com|edu|net|tv)' emails.txt
# use -Ev to negate this entire lookup

# redirect this to a file for correct addresses:
grep -E '^[A-Za-z].*@[A-Za-z].*\.(org|com|edu|net|tv)' emails.txt > correct.txt


# --------------------
# example to validate us phone numbers
# --------------------
#get us phone numbers, here is the pattern to look for:
# ###-###-####
# (###)-###-####
# (###)###-####

# maybe an openning bracket, 3 digits, maybe a closing parenthesis, dash, repeat that... then anchor the last four digits
# to the end of the line or an over four digit ending could pass the test
grep -E '\(?[0-9]{3}\)?\-?[0-9]{3}\-?[0-9]{4}$'


# --------------------
# sed (stream editor) 
# --------------------

# pipe to sed
# we can use anything we want as a delimeter - most common to use is a forward slash: /
# s/<thingtoreplace>/<replacer>/
echo 'red ball' | sed 's/red/blue/'

# --------------------
# sed example
# --------------------
# alter this wagons.txt file:
# red wagon
# red wagon
# orange wagon
# oragne wagon
# yellow wagon
# blue wagon
# blue wagon

# changes red to black wagons
sed 's/red/black' wagons.txt

# make changes and print out included changes
sed 's/red/black/p' wagons.txt

# subress the output to only print out altered lines
sed -n 's/red/black/p' wagons.txt

# change 'wagon' to 'polygon'
# subexpression using escaped parenthesis to carry over contents 
# of brackets and do the expected replacement of the rest
# used the escaped 1 to supress
sed -n 's/wa\(gon\)/poly\1/' wagons.txt

# --------------------
# address notation in sed
# --------------------
# in lines.txt we have:
# one 
# two
# three



# print out lines
sed 'p' lines.txt
# output prints twice because it streams out every line then prints every line
# one 
# one 
# two
# two
# three
# three

# supress the streaming out of lines
sed -n 'p' lines.txt
# one 
# two
# three

# print out only third line
sed -n '3p' lines.txt
# three

# print out only third line
sed -n '3!p' lines.txt
# one
# two
# three

# print out only last line
sed -n '$p' lines.txt
# three

# print out 2-3 line
sed -n '2,3p' lines.txt
# two
# three

# print out every secon line
# <start>~<amount-to-skip>
sed -n '1~2p' lines.txt
# one
# three

# match this line and the following number of lines
sed -n '2,+9p' lines.txt
# two
# three

# use extende regexp
# /regexp/
sed -n '/[^t]/p' lines.txt
# two
# three

# --------------------
# phone number example in sed
# --------------------

#get us phone numbers, here is the pattern to look for:
# ###-###-####
# (###)-###-####
# (###)###-####

# same phone number lookup as the further above grep example, only that we use = 
# with sed to print only the line numbers
# sed -n '/<regex>/='
sed -n '/\(?[0-9]{3}\)?\-?[0-9]{3}\-?[0-9]{4}$/=' phones.txt
# 1
# 3
# 5


# --------------------
# #put regular expresssions in a file
# (below is phones.sed file)
# --------------------

# print correct phone numbers.

# print title 
# insert text before line 1 (i is for insert text before current line)
# \ followed by a newline escapes the newline
# \ escape another newline
# title then newline
l i\
\
Correct Phone Numbers:\

# print only 'correct' phone numbers (becaus we put the n swith in the usage):
/\(?[0-9]\{3\}\)\?\-\?[0-9]\{3\}\-[0-9]\{4\}$/p

# write the same expression again to match against the results using the 'a' command
# print 'is correct' and a newline after each (remember to add newline at end of file):
/\(?[0-9]\{3\}\)\?\-\?[0-9]\{3\}\-[0-9]\{4\}$/a is correct/


#end ----------------------


# usage-------------:
# Use with -f switch to take the regular expression input from a file
sed -nf phones.sed ~/phones.txt


# --------------------
# awk (extracts fields from a file)
# --------------------

# to get just the permission and filename 
# fields from a list like this:
#-rw-rw-r-- 1 rick rick 73 Feb 2 bindier.txt
# ...

# ls -l | awk '{print $<column#1> $<>}'
ls -l | awk '{print $1 $9}'

















