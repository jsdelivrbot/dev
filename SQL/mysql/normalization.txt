/* ==========================================================================
Atomic Data & Table Templating
========================================================================== */

As your database increases in size, you are going to want everything to be organized, so that it can perform your queries quickly. If your tables are set up properly, your database will be able to crank through hundreds of thousands of bits of data in seconds.
How do you know how to best set up your tables though? Just follow some simple rules:
Every table should focus on describing just one thing. Ex. Customer Table would have name, age, location, contact information. It shouldnâ??t contain lists of anything such as interests, job history, past address, products purchased, etc.
After you decide what one thing your table will describe, then decide what things you need to describe that thing. Refer to the customer example given in the last step.
Write out all the ways to describe the thing and if any of those things requires multiple inputs, pull them out and create a new table for them. For example, a list of past employers.
Once your table values have been broken down, we refer to these values as being atomic. Be careful not to break them down to a point in which the data is harder to work with. It might make sense to create a different variable for the house number, street name, apartment number, etc.; but by doing so you may make your self more work? That decision is up to you?
p. Some additional rules to help you make your data atomic: Donâ??t have multiple columns with the same sort of information. Ex. If you wanted to include a employment history you should create job1, job2, job3 columns. Make a new table with that data instead. 
Donâ??t include multiple values in one cell. Ex. You shouldnâ??t create a cell named jobs and then give it the value: McDonalds, Radio Shack, Walmart,â?¦ Normalized Tables

q. What does normalized mean?
Normalized just means that the database is organized in a way that is considered standardized by professional SQL programmers. So if someone new needs to work with the tables theyâ??ll be able to understand how to easily.
Another benefit to normalizing your tables is that your queries will run much quicker and the chance your database will be corrupted will go down. 
r. What are the rules for creating normalized tables:
The tables and variables defined in them must be atomic Each row must have a Primary Key defined. Like your social security number identifies you, the Primary Key will identify your row. 
You also want to eliminate using the same values repeatedly in your columns. Ex. You wouldnâ??t want a column named instructors, in which you hand typed in their names each time. You instead, should create an instructor table and link to itâ??s key. 
Every variable in a table should directly relate to the primary key. Ex. You should create tables for all of your customers potential states, cities and zip codes, instead of including them in the main customer table. Then you would link them using foreign keys. Note: Many people think this last rule is overkill and can be ignored! 
No two columns should have a relationship in which when one changes another must also change in the same table. This is called a Dependency. Note: This is another rule that is sometimes ignored.

/* ==========================================================================
relationships
========================================================================== */

59. One-to-One Relationship (SLIDE)

	a. In this One-to-One relationship there can only be one social security number per person. Hence,  each social security number can be associated with one person. As well, one person in the other table only matches up with one social security number.

	b. One-to-One relationships can be identified also in that the foreign keys never duplicate across all rows.

	c. If you are confused by the One-to-One relationship it is understandable, because they are not often used. Most of the time if a value never repeats it should remain in the parent table being customer in this case. Just understand that in a One-to-One relationship, exactly one row in a parent table is related to exactly one row of a child table.

60. One-to-Many Relationship

	a. When we are talking about One-to-Many relationships think about the table diagram here. If you had a list of customers chances are some of them would live in the same state. Hence, in the state column in the parent table, it would be common to see a duplication of states. In this example, each customer can only live in one state so their would only be one id used for each customer.

	b. Just remember that, a One-to-Many relationship is one in which a record in the parent table can have many matching records in the child table, but a record in the child can only match one record in the parent. A customer can choose to live in any state, but they can only live in one at a time.

61. Many-to-Many Relationship

	a. Many people can own many different products. In this example, you can see an example of a Many-to-Many relationship. This is a sign of a non-normalized database, by the way. How could you ever access this information:

	b. If a customer buys more than one product, you will have multiple product idâ??s associated with each customer. As well, you would have multiple customer idâ??s associated with each product.
