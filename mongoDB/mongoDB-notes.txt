#start mongo shell:
==========================
mongo —shell
or
mongo

#start shell if it has a different port
mongo --port 19500

#to run:
==========================

#start mongoDB
mongod

#run mongoDB every time computer starts
brew services start mongodb

#to stop it
brew services stop mongodb
or
sudo service mongod stop

#restart mongoldb:
==========================
brew services stop mongodb
or
use admin
db.shutdownServer();
(stop the shell then)
brew services start mongodb

#show/use db:
==========================
show dbs
use <db-name>

#show collections:
==========================
show collections

#show/find documents:
==========================
all docs:
db.<collection-name>.find()
by condition:
db.<collection-name>.find({ "borough": "Manhattan" })

#create indexes on item (for text searches)
==========================
db.<collection-name>.createIndex({ title: “text” })

#remove all indexes (except id index) in collection
==========================
db.<collection-name>.dropIndexes()

#list all indexes on all collections
==========================
db.getCollectionNames().forEach(function(collection) {
   indexes = db[collection].getIndexes();
   print("Indexes for " + collection + ":");
   printjson(indexes);
});

#mongoDB conf file:
==========================
normally in:
/etc/mongodb.config

if installed via home-brew:
/usr/local/etc/mongod.conf

after changing, run this command:
mongod --config /etc/mongod.conf
or
mongod --config /usr/local/etc/mongod.conf

then restart

#robomongo:
==========================
-click create
-Name:
Localhost
-Address:
(Leave the Address part as default)
-save then connect

#links:
==========================
udemy course github link (lessons stored in branches):
https://github.com/StephenGrider/MongoCasts

#security:
==========================
steps:
https://www.youtube.com/watch?v=cqc7YbZpLA4&t=74s

instructions:
https://codewithintent.com/how-to-secure-mongodb/

docs on mongo website:
https://docs.mongodb.com/manual/administration/security-checklist/

use mongo sanitize in your app server
https://www.npmjs.com/package/express-mongo-sanitize


steps:

1. user authentication:
https://docs.mongodb.com/manual/tutorial/enable-authentication/
(note that the admin database is internal)
use admin
db.createUser(
  {
    user: “<username>”,
    pwd: “<password>”,
    roles: [ { role: "userAdminAnyDatabase", db: "admin" } ]
  }
)

db.changeUserPassword(‘’,’ASJ6a9LO0q0b22g')


2. change mongoldb port. In the /etc/mongodb.config or in /usr/local/etc/mongod.conf change to:

systemLog:
  destination: file
  path: /usr/local/var/log/mongodb/mongo.log
  logAppend: true
storage:
  dbPath: /usr/local/var/mongodb
net:
  bindIp: 127.0.0.1
  port: <port#>

restart mongo
test the port:
lsof -i -ac mongod


#mongodump (backup db):
==========================
using scripts:
https://dzone.com/articles/auto-backup-mongodb-database-with-nodejs-on-server-1

thought the server:
https://coderwall.com/p/hdmmnq/easy-automatic-nightly-backups-for-mongodb
be sure to store the environment variables in a .bachrc file or similar

#!/bin/sh
DIR=`date +%m%d%y`
DEST=~/db_backups/$DIR
mkdir $DEST
mongodump -h <your_database_host> -d <your_database_name> -u <username> -p <password> -o $DEST


#check remote connection:
==========================
replace zeros with ip address:
mongo --host 000.000.000.000


#check port it’s running on:
==========================
lsof -i -ac mongod
or 
lsof -i :<the-mongo-port>



#import test data:
==========================
mongoimport -h 127.0.0.1:<port> --db test --collection restaurants --file /tmp/primer-dataset.json
then in mongo shell:
db.restaurants.find().limit( 1 ).pretty()

mongo tutorials (general mongoDB):
==========================
https://www.youtube.com/playlist?list=PL4cUxeGkcC9jpvoYriLI0bY8DOgWZfi6u


mongoDB Geojson:
====================

* geoindexing in mongoDB
http://blog.robertonodi.me/how-to-use-geospatial-indexing-in-mongodb-using-express-and-mongoose/
https://github.com/robert52/simple-geolocation
https://dzone.com/articles/geospatial-queries-mongoose
https://kostasbariotis.com/geospatial-query-with-mongodb-and-node-js/

mongoose geojson schema npm package
https://www.npmjs.com/package/mongoose-geojson-schema
